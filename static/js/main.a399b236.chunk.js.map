{"version":3,"sources":["numbers.js","App.js","serviceWorker.js","index.js"],"names":["numbersAsWords","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateProbability","bind","assertThisInitialized","state","letterCount","length","letter","matchCount","ev","target","value","slice","setState","test","find","RegExp","concat","matches","match","console","info","split","map","index","react_default","a","createElement","key","className","Number","parseFloat","toPrecision","htmlFor","id","type","onChange","placeholder","aria-live","aria-atomic","getPercentage","dangerouslySetInnerHTML","__html","displayLetters","React","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAAaA,SAAiB,utCC+FfC,cAzFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,qBAAuBP,EAAKO,qBAAqBC,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAKU,MAAQ,CACXC,YAAad,EAAee,OAC5BC,OAAQ,GACRC,WAAY,GAPGd,oFAWEe,GAEnB,IAAMF,EAASE,EAAGC,OAAOC,MAAMC,OAAO,GAClCJ,EAAa,EAEjB,GAA+B,IAA3BC,EAAGC,OAAOC,MAAML,OAClB,OAAOT,KAAKgB,SAAS,CACnBN,OAAQ,GACRC,WAAY,IAIhB,GAAI,WAAWM,KAAKP,GAApB,CAKA,IAAMQ,EAAO,IAAIC,OAAJ,GAAAC,OAAcV,GAAU,KAC/BW,EAAU3B,EAAe4B,MAAMJ,GAEjCG,GAAWA,EAAQZ,SACrBE,EAAaU,EAAQZ,QAGvBT,KAAKgB,SAAS,CACZN,SACAC,oBAbAY,QAAQC,KAAR,GAAAJ,OAAgBV,EAAhB,8DAoBF,OAFgBhB,EAAe+B,MAAM,IAEtBC,IAAI,SAAChB,EAAQiB,GAC1B,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,IAAG,GAAAX,OAAKV,EAAL,KAAAU,OAAeO,GAASK,UAAWtB,GAASA,6CAK9D,OAA4E,IAApEuB,OAAOC,WAAWlC,KAAKO,MAAMI,WAAaX,KAAKO,MAAMC,cAAoB2B,YAAY,oCAI7F,OACEP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,6JAKAF,EAAAC,EAAAC,cAAA,QAAME,UAAU,QACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,UAAf,WACJR,EAAAC,EAAAC,cAAA,SAAOO,GAAG,SAASC,KAAK,OAAOC,SAAUvC,KAAKI,qBAAsBU,MAAOd,KAAKO,MAAMG,OAAQ8B,YAAY,OAG5GZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKW,YAAU,SAASC,cAAY,QACjC1C,KAAKO,MAAMI,WADd,MAC6BX,KAAKO,MAAMC,YADxC,KACuDR,KAAK2C,gBAD5D,QAOJf,EAAAC,EAAAC,cAAA,KAAGE,UAAU,WACXJ,EAAAC,EAAAC,cAAA,SAAOc,wBAAyB,CAC9BC,OAAM,IAAAzB,OAAMpB,KAAKO,MAAMG,OAAjB,0BAEPV,KAAK8C,0BAlFEC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCZN+B,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a399b236.chunk.js","sourcesContent":["export const numbersAsWords = \"onetwothreefourfivesixseveneightnineteneleventwelvethirteenfourteenfifteensixteenseventeeneighteennineteentwentytwentyonetwentytwotwentythreetwentyfourtwentyfivetwentysixtwentyseventwentyeighttwentyninethirtythirtyonethirtytwothirtythreethirtyfourthirtyfivethirtysixthirtyseventhirtyeightthirtyninefortyfortyonefortytwofortythreefortyfourfortyfivefortysixfortysevenfortyeightfortyninefiftyfiftyonefiftytwofiftythreefiftyfourfiftyfivefiftysixfiftysevenfiftyeightfiftyninesixtysixtyonesixtytwosixtythreesixtyfoursixtyfivesixtysixsixtysevensixtyeightsixtynineseventyseventyoneseventytwoseventythreeseventyfourseventyfiveseventysixseventysevenseventyeightseventynineeightyeightyoneeightytwoeightythreeeightyfoureightyfiveeightysixeightyseveneightyeighteightynineninetyninetyoneninetytwoninetythreeninetyfourninetyfiveninetysixninetysevenninetyeightninetynineonehundredonehundredoneonehundredtwoonehundredthreeonehundredfouronehundredfiveonehundredsixonehundredsevenonehundredeightonehundrednineonehundredtenonehundredelevenonehundredtwelveonehundredthirteenonehundredfourteenonehundredfifteenonehundredsixteenonehundredseventeenonehundredeighteenonehundrednineteenonehundredtwentyonehundredtwentyoneonehundredtwentytwoonehundredtwentythree\";","import './App.css';\n\nimport React from 'react';\nimport { numbersAsWords } from \"./numbers\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.calculateProbability = this.calculateProbability.bind(this);\n    this.state = {\n      letterCount: numbersAsWords.length,\n      letter: \"\",\n      matchCount: 0\n    }\n  }\n\n  calculateProbability(ev) {\n    // Grab only the last letter that was typed in\n    const letter = ev.target.value.slice(-1);\n    let matchCount = 0;\n\n    if (ev.target.value.length === 0) {\n      return this.setState({\n        letter: \"\",\n        matchCount: 0\n      });\n    }\n\n    if(!/[a-zA-Z]/.test(letter)) {\n      console.info(`${letter} is not a letter`);\n      return;\n    }    \n\n    const find = new RegExp(`${letter}`, \"g\");\n    const matches = numbersAsWords.match(find);\n\n    if (matches && matches.length) {\n      matchCount = matches.length;\n    }\n\n    this.setState({\n      letter,\n      matchCount\n    });\n  }\n\n  displayLetters() {\n    const letters = numbersAsWords.split(\"\");\n\n    return letters.map((letter, index) => {\n      return <span key={`${letter}-${index}`} className={letter}>{letter}</span>\n    });\n  }\n\n  getPercentage() {\n    return (Number.parseFloat(this.state.matchCount / this.state.letterCount) * 100).toPrecision(4);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>Letter Probabilities</h1>\n        <p>\n          The string at the bottom represents the numbers 1-123 spelled out in words. \n          Type in a letter to see the count of times it appears in the string. \n        </p>\n\n        <form className=\"form\">\n          <div className=\"letter-input\">\n            <h2><label htmlFor=\"letter\">Letter</label></h2>\n            <input id=\"letter\" type=\"text\" onChange={this.calculateProbability} value={this.state.letter} placeholder=\"a\"/>\n          </div>\n\n          <div className=\"probability-output\">\n            <h2>Probability</h2>\n            <div aria-live=\"polite\" aria-atomic=\"true\">\n              {this.state.matchCount} / {this.state.letterCount} ({this.getPercentage()}%)\n            </div>\n          </div>\n        </form>\n\n\n        <p className=\"letters\">\n          <style dangerouslySetInnerHTML={{\n            __html: `.${this.state.letter} { color: #ec1010 }`\n          }} />\n          {this.displayLetters()}\n        </p>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}